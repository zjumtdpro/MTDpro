#!/usr/bin/env python3
"""
MAF Insertion Detector

This script identifies insertions (≥4 bp) in MAF alignment files generated by Mugsy.
It processes the alignment file and extracts relevant insertion information.

Usage:
    python maf_insertion_detector.py <maf_file> <reference_name> <output_file>

Arguments:
    maf_file        : Path to the MAF alignment file.
    reference_name  : Reference genome identifier (e.g., 'hg19.chr1').
    output_file     : Output file to save detected insertions.

Example:
    python maf_insertion_detector.py input.maf hg19.chr1 output.txt
"""

import re
import sys

def identify_insertions(maf_file, ref_name):
    """
    Identifies insertions (≥4 bp) in MAF alignment file for the given reference genome.
    
    Args:
        maf_file (str): Path to the MAF alignment file.
        ref_name (str): Reference genome identifier (e.g., 'hg19.chr1').
    
    Returns:
        list of tuple: Detected insertions with relevant information (reference genome, position, 
                       nucleotide, insertion sequence, and length).
    """
    insertions = []
    
    with open(maf_file, 'r') as f:
        lines = f.readlines()

        for line_num, line in enumerate(lines):
            fields = line.strip().split()
            
            # Ensure the line is valid and matches the expected format
            if len(fields) < 7:
                continue

            # Process for forward strand
            if line.startswith(ref_name) and fields[4] == "+":
                insertions += process_insertion_line(fields, line_num, lines, ref_name, 1)

            # Process for reverse strand
            elif line.startswith(ref_name) and fields[4] == "-":
                insertions += process_insertion_line(fields, line_num, lines, ref_name, -1)

    return insertions


def process_insertion_line(fields, line_num, lines, ref_name, direction):
    """
    Processes an individual line in the MAF file and extracts insertions.

    Args:
        fields (list): List of fields in the current line of the MAF file.
        line_num (int): The line number of the current MAF line.
        lines (list): The list of all lines in the MAF file.
        ref_name (str): The reference genome identifier.
        direction (int): Direction of the strand (+1 for forward, -1 for reverse).
    
    Returns:
        list: Detected insertions in the current line.
    """
    insertions = []
    
    ref_seq = fields[1]
    length_seq = int(fields[3])
    start_pos = int(fields[2])
    align_seq = fields[6]
    
    if direction == -1:
        align_seq = align_seq[::-1]  # Reverse complement for negative strand

    # Find all insertion regions using regex for continuous dashes
    find_insertions = re.finditer(r'-+', align_seq)

    # Process each insertion region that is ≥ 4 bp
    for match in find_insertions:
        if len(match.group()) >= 4:
            ins_start = match.start()
            ins_end = match.end() - 1
            
            insert_line_num2 = line_num - 1 if lines[line_num - 1].startswith('s') else line_num + 1
            align_fields = lines[insert_line_num2].strip().split()
            align_seq2 = align_fields[6]

            if ins_start == 0:
                ins_nt = "out_of_range"
                allele_pos = start_pos
                insertion_allele = align_seq2[ins_start:(ins_end+1)]
                insertions.append((fields[1], allele_pos, ins_nt, insertion_allele, len(insertion_allele)))
            else:
                tmp_var3 = align_seq[0:ins_start]
                tmp_var4 = sum(1 for char in tmp_var3 if char == '-')
                new_ref_seq = align_seq[0:ins_start].replace('-', '') + align_seq2[ins_start:(ins_end+1)]
                new_ins_start = ins_start - tmp_var4
                new_ins_end = ins_end - tmp_var4
                n = 0
                while True:
                    if new_ins_start - 1 - n >= 0:
                        if new_ref_seq[new_ins_end - n] == new_ref_seq[new_ins_start - 1 - n]:
                            n += 1
                        else:
                            break
                    else:
                        break
                ins_nt = new_ref_seq[new_ins_start - 1 - n] if new_ins_start - 1 - n >= 0 else "out_of_range"
                allele_pos = (start_pos + 1) + (new_ins_start - 1 - n)
                insertion_allele = new_ref_seq[new_ins_start - n:new_ins_end - n + 1]
                insertions.append((fields[1], allele_pos, ins_nt, insertion_allele, len(insertion_allele)))

    return insertions


def validate_arguments():
    """Ensures the correct number of command-line arguments are provided."""
    if len(sys.argv) != 4:
        print("Usage: python maf_insertion_detector.py <maf_file> <reference_name> <output_file>")
        sys.exit(1)


def main():
    """Main function to run the MAF Insertion Detector."""
    validate_arguments()

    maf_file = sys.argv[1]
    ref_name2 = sys.argv[2]
    output_filename = sys.argv[3]
    ref_name = 's ' + ref_name2.split('.')[0]  # Extract reference name prefix

    # Call function to detect insertions
    result = identify_insertions(maf_file, ref_name)

    # Write results to output file
    with open(output_filename, "w") as output_file:
        for insertion in result:
            output_file.write("{}\t{}\t{}\t{}\t{}\n".format(insertion[0].split('.')[1] + '.' + insertion[0].split('.')[2], insertion[1], insertion[2], insertion[3], insertion[4]))


if __name__ == "__main__":
    main()
